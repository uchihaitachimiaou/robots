{"version":3,"sources":["components/cards_list/Card.component.jsx","components/cards_list/CardsList.component.jsx","components/search_box/SearchBox.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","monster","picture","id","className","name","src","alt","email","CardsList","monstersList","filteredMonsters","map","SearchBox","handleChange","onChange","e","target","value","type","placeholder","App","state","monsters","search","filter","toLowerCase","includes","inputUser","setState","fetch","then","response","json","data","this","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gNAaeA,EAXH,SAAC,GAAa,IAAZC,EAAW,EAAXA,QACRC,EAAO,wCAAoCD,EAAQE,GAA5C,iBACZ,OACG,sBAAKC,UAAU,OAAf,UACE,6BAAKH,EAAQI,OACb,qBAAKC,IAAKJ,EAASK,IAAI,KACvB,4BAAIN,EAAQO,YCYHC,EAjBE,SAAC,GAAuB,IACnCC,EADkC,EAArBC,iBACmBC,KAAI,SAAAX,GACtC,OACE,8BACE,cAAC,EAAD,CAAMA,QAASA,KADPA,EAAQE,OAMtB,OACE,gCACE,4CACA,8BAAMO,QCLGG,EARE,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,aACjB,OACE,8BACE,uBAAOC,SAAU,SAACC,GAAD,OAAKF,EAAaE,EAAEC,OAAOC,QAAQC,KAAK,SAASC,YAAY,2BCqDrEC,E,kDAlCb,aAAc,IAAD,8BACX,gBAWFV,iBAAiB,WAAK,IAAD,EACM,EAAKW,MAAzBC,EADc,EACdA,SAAUC,EADI,EACJA,OAIf,OAH2BD,EAASE,QAAO,SAAAxB,GACzC,OAAQA,EAAQI,KAAKqB,cAAcC,SAASH,EAAOE,mBAf1C,EAmBbZ,aAAa,SAACc,GACZ,EAAKC,SAAS,CAACL,OAAOI,KAlBtB,EAAKN,MAAQ,CACXC,SAAU,GACVC,OAAQ,IAJC,E,qDAOb,WAAoB,IAAD,OACjBM,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAI,EAAKL,SAAS,CAACN,SAAUW,S,oBAazC,WACE,OACE,gCACE,kDACA,cAAC,EAAD,CAAWpB,aAAgBqB,KAAKrB,eAChC,cAAC,EAAD,CAAWH,iBAAoBwB,KAAKxB,4B,GA7B1ByB,aCXHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBR,MAAK,YAAkD,IAA/CS,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.b06fedb7.chunk.js","sourcesContent":["import {React} from 'react';\n\nconst Card =({monster})=>{\n  let picture = `https://robohash.org/set=set2/${monster.id}?size=150x150`;\n return(\n    <div className=\"card\">\n      <h3>{monster.name}</h3>\n      <img src={picture} alt=\"\" />\n      <p>{monster.email}</p>\n    </div>\n  )\n};\n\nexport default Card;","import {React} from 'react';\nimport Card from './Card.component';\n\nconst CardsList =({filteredMonsters})=> {\n  let monstersList = filteredMonsters.map(monster => {\n    return (\n      <div key={monster.id}>\n        <Card monster={monster} />\n      </div>\n    )\n  });\n\n  return(\n    <div>\n      <h2>cards list</h2>\n      <div>{monstersList}</div>\n    </div>\n  )\n};\n\nexport default CardsList;","import {React} from 'react';\n\nconst SearchBox =({handleChange})=> {\n  return(\n    <div>\n      <input onChange={(e)=>handleChange(e.target.value)} type=\"search\" placeholder=\"search for monsters\" />\n    </div>\n  )\n};\n\nexport default SearchBox;","/// Monsters rolodex\n/* simple app that filters and display monsters according what a users are searching for\n using an search imput field */\n\n // App flowchart\n /* components to create:\n  1. mother component / App\n  2. child component / monsters cards list\n  3. child component / monster card\n  4. child component / search bar (to filter monsters)\n */\n  /*  fetch data and distribute it to through the app\n    1. fetch data from API (placeholder)\n    2. map date from API\n    3. listen to users input (change) and store it into state\n    3. filter data\n    2. pass data as props as well as props as function\n  */\n\nimport {React, Component} from 'react';\nimport CardsList from './components/cards_list/CardsList.component';\nimport SearchBox from './components/search_box/SearchBox.component';\n\nclass App extends Component{\n  constructor(){\n    super();\n    this.state = {\n      monsters: [],\n      search: ''\n    }\n  }\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(data => this.setState({monsters: data}))\n  }\n  filteredMonsters=()=>{\n    let {monsters, search} = this.state;\n    let filteredMonstersList = monsters.filter(monster=>{\n      return (monster.name.toLowerCase().includes(search.toLowerCase()))\n    })\n    return filteredMonstersList\n  }\n  handleChange=(inputUser)=>{\n    this.setState({search:inputUser})\n  }\n\n  render(){\n    return(\n      <div>\n        <h1>monsters rolodex</h1>\n        <SearchBox handleChange = {this.handleChange} />\n        <CardsList filteredMonsters = {this.filteredMonsters()} />\n      </div>\n    )\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}